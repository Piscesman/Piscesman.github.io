<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[http-request-response]]></title>
      <url>%2F2017%2F07%2F19%2Fhttp-request-response%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[JVM-knownlanguage]]></title>
      <url>%2F2017%2F07%2F19%2FJVM-knownlanguage%2F</url>
      <content type="text"><![CDATA[jvm总体梳理类加载机制类的生命周期 1、加载：查找并加载类的二进制数据，在Java堆中也创建一个java.lang.Class类的对象2、验证：文件格式、元数据、字节码、符号引用验证3、准备：为类的静态变量分配内存，并将其初始化为默认值4、解析：把类中的符号引用转换为直接引用5、初始化：为类的静态变量赋予正确的初始值6、使用：new出正确的对象在从程序中使用7、卸载：执行垃圾回收 类加载器 1、启动类加载器2、扩展类加载器3、应用类加载器 类加载机制1、全盘负责2、父类委托3、缓存机制 jvm内存结构 1、Java堆（Heap）,是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。2、方法区（Method Area）,方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。3、程序计数器（Program Counter Register）,程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。4、JVM栈（JVM Stacks）,与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。5、本地方法栈（Native Method Stacks）,本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。 对象分配规则1、对象优先分配在Eden区，如果Eden区没有足够的空间时，虚拟机执行一次Minor GC。2、大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。这样做的目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。3、长期存活的对象进入老年代。虚拟机为每个对象定义了一个年龄计数器，如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象的年龄加1，知道达到阀值对象进入老年区。4、动态判断对象的年龄。如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代。5、空间分配担保。每次进行Minor GC时，JVM会计算Survivor区移至老年区的对象的平均大小，如果这个值大于老年区的剩余值大小则进行一次Full GC，如果小于检查HandlePromotionFailure设置，如果true则只进行Monitor GC,如果false则进行Full GC。 GC算法 垃圾回收对象存活判断1、引用计数算法2、对象不可达算法 GC算法1、标记-清除算法2、标记-压缩算法3、复制算法4、分代手机算法 垃圾回收器1、Serial收集器，串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。2、ParNew收集器，ParNew收集器其实就是Serial收集器的多线程版本。3、Parallel收集器，Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。4、Parallel Old 收集器，Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法5、CMS收集器，CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。6、G1收集器，G1 (Garbage-First)是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足GC停顿时间要求的同时,还具备高吞吐量性能特征 GC分析 命令调优GC日志分析调优命令1、jps，JVM Process Status Tool,显示指定系统内所有的HotSpot虚拟机进程。2、jstat，JVM statistics Monitoring是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。3、jmap，JVM Memory Map命令用于生成heap dump文件4、jhat，JVM Heap Analysis Tool命令是与jmap搭配使用，用来分析jmap生成的dump，jhat内置了一个微型的HTTP/HTML服务器，生成dump的分析结果后，可以在浏览器中查看5、jstack，用于生成java虚拟机当前时刻的线程快照。6、jinfo，JVM Configuration info 这个命令作用是实时查看和调整虚拟机运行参数。 调优工具1、jconsole，Java Monitoring and Management Console是从java5开始，在JDK中自带的java监控和管理控制台，用于对JVM中内存，线程和类等的监控2、jvisualvm，jdk自带全能工具，可以分析内存快照、线程快照；监控内存变化、GC变化等。3、MAT，Memory Analyzer Tool，一个基于Eclipse的内存分析工具，是一个快速、功能丰富的Java heap分析工具，它可以帮助我们查找内存泄漏和减少内存消耗4、GChisto，一款专业分析gc日志的工具]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Dynamic-proxy-and-static-proxy]]></title>
      <url>%2F2017%2F07%2F17%2FDynamic-proxy-and-static-proxy%2F</url>
      <content type="text"><![CDATA[常常看见spring的AOP是由动态代理实现的，最近准备面试，将这些知识点一起整理下 代理通用实例类1234public interface Person &#123;&#125; 123456789101112public class Student implements Person&#123; private static Student student=null; public static Student getInstance()&#123; if(student==null) student=new Student(); return student; &#125; public Student()&#123; System.out.println("我是一个学生"); &#125;&#125; 1234567891011121314public class Teacher implements Person&#123; private static Teacher teacher=null; public static Teacher getInstance()&#123; if(teacher==null)&#123; teacher=new Teacher(); &#125; return teacher; &#125; public Teacher()&#123; System.out.println("我是一个老师"); &#125;&#125; 静态代理123456789public class StaticPorxy &#123; public static Teacher getTeacher()&#123; return Teacher.getInstance(); &#125; public static Student getStudent()&#123; return Student.getInstance(); &#125;&#125; 动态代理123456789101112131415161718192021222324import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;public class DynamicProxy implements InvocationHandler&#123; public Object targetObject; public Object newProxyInstance(Object targetObject)&#123; this.targetObject=targetObject; //该方法用于为指定类装载器、一组接口及调用处理器生成动态代理类实例 // 第一个参数指定产生代理对象的类加载器，需要将其指定为和目标对象同一个类加载器 //第二个参数要实现和目标对象一样的接口，所以只需要拿到目标对象的实现接口 //第三个参数表明这些被拦截的方法在被拦截时需要执行哪个InvocationHandler的invoke方法 //根据传入的目标返回一个代理对象 return Proxy.newProxyInstance(targetObject.getClass().getClassLoader(), targetObject.getClass().getInterfaces(),this); &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; // TODO Auto-generated method stub return method.invoke(proxy, args); &#125;&#125; 测试类1234567891011public class TestMain &#123;public static void main(String[] args) &#123; //静态调用// StaticPerson.getStudent();// StaticPerson.getTeacher(); //动态调用 DynamicProxy proxy=new DynamicProxy(); Person student=(Person) proxy.newProxyInstance(new Student()); Person teacher=(Person) proxy.newProxyInstance(new Teacher());&#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[linux常用命令大全]]></title>
      <url>%2F2017%2F07%2F17%2Flinux-popular-command%2F</url>
      <content type="text"><![CDATA[linux常用命令大全(转)由于记忆力有限,把平时常用的Linux命令整理出来,以便随时查阅: linux 基本命令 ls (list 显示当前目录下文件和目录 ls -l 详细显示 =ll )[root@linux ~]# ls [-aAdfFhilRS] 目录名称[root@linux ~]# ls [–color={none,auto,always}] 目录名称[root@linux ~]# ls [–full-time] 目录名称参数：-a ：全部的档案，连同隐藏档( 开头为 . 的档案) 一起列出来～-A ：全部的档案，连同隐藏档，但不包括 . 与 .. 这两个目录，一起列出来～-d ：仅列出目录本身，而不是列出目录内的档案数据-f ：直接列出结果，而不进行排序 (ls 预设会以档名排序！)-F ：根据档案、目录等信息，给予附加数据结构，例如：*：代表可执行档； /：代表目录； =：代表 socket 档案； |：代表 FIFO 档案；-h ：将档案容量以人类较易读的方式(例如 GB, KB 等等)列出来；-i ：列出 inode 位置，而非列出档案属性；-l ：长数据串行出，包含档案的属性等等数据；-n ：列出 UID 与 GID 而非使用者与群组的名称 (UID与GID会在账号管理提到！)-r ：将排序结果反向输出，例如：原本档名由小到大，反向则为由大到小；-R ：连同子目录内容一起列出来；-S ：以档案容量大小排序！-t ：依时间排序–color=never ：不要依据档案特性给予颜色显示；–color=always ：显示颜色–color=auto ：让系统自行依据设定来判断是否给予颜色–full-time ：以完整时间模式 (包含年、月、日、时、分) 输出–time={atime,ctime} ：输出 access 时间或 改变权限属性时间 (ctime)而非内容变更时间 (modification time) cat 由第一行开始显示档案内容[root@linux ~]# cat [-AEnTv]参数：-A ：相当于 -vET 的整合参数，可列出一些特殊字符～-E ：将结尾的断行字符 $ 显示出来；-n ：打印出行号；-T ：将 [tab] 按键以 ^I 显示出来；-v ：列出一些看不出来的特殊字符 tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！nl 显示的时候，顺道输出行号！ [root@linux ~]# nl [-bnw] 档案参数：-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号；-b t ：如果有空行，空的那一行不要列出行号；-n ：列出行号表示的方法，主要有三种：-n ln ：行号在屏幕的最左方显示；-n rn ：行号在自己字段的最右方显示，且不加 0 ；-n rz ：行号在自己字段的最右方显示，且加 0 ；-w ：行号字段的占用的位数。 more 一页一页的显示档案内容 空格键 (space)：代表向下翻一页； Enter ：代表向下翻『一行』； /字符串 ：代表在这个显示的内容当中，向下搜寻『字符串』； :f ：立刻显示出文件名以及目前显示的行数； q ：代表立刻离开 more ，不再显示该档案内容。 less 与 more 类似，但是比 more 更好的是，他可以往前翻页！空格键 ：向下翻动一页；[pagedown]：向下翻动一页；[pageup] ：向上翻动一页；/字符串 ：向下搜寻『字符串』的功能；?字符串 ：向上搜寻『字符串』的功能；n ：重复前一个搜寻 (与 / 或 ? 有关！)N ：反向的重复前一个搜寻 (与 / 或 ? 有关！)q ：离开 less 这个程序； head 只看头几行[root@linux ~]# head [-n number] 档案参数：-n ：后面接数字，代表显示几行的意思 tail 只看尾巴几行 tail -200f logfile2 ( 显示日志最后 200 行 )od 以二进制的方式读取档案内容！ [root@linux ~]# od [-t TYPE] 档案参数：-t ：后面可以接各种『类型 (TYPE)』的输出，例如：a ：利用预设的字符来输出；c ：使用 ASCII 字符来输出d[size] ：利用十进制(decimal)来输出数据，每个整数占用 size bytes ；f[size] ：利用浮点数值(floating)来输出数据，每个数占用 size bytes ；o[size] ：利用八进位(octal)来输出数据，每个整数占用 size bytes ；x[size] ：利用十六进制(hexadecimal)来输出数据，每个整数占用 size bytes ； chmod ( chmod +R filename增加文件读写执行权限,+R 可读,+W 可写,+X 可执行 ( chmod 777 filename 增加文件读写执行权限的另一种方式, 7=&gt; 对应8进制的 111 可读可写可执行) chown ( chown -R haowen .将当前目录下所有文件和目录权限赋给 haowen ,-R 包括子目录) chgrp -R mysql . (把当前文件夹变更到mysql群组,mysql是已经有的群组)变更文件或目录的所属群组。 umask 档案预设权限： umask 指定的是『该默认值需要减掉的权限 ！』 chattr (设定档案隐藏属性)lsattr (显示档案隐藏属性) find ( find ./ -name file1 -print ,从当前目录向下查找名为 file1 的文件) mkdir ( mkdir dir1 ,新建目录 dir1 ) mkdir [-mp] 目录名称参数：-m ：设定档案的权限喔！直接设定，不需要看预设权限 (umask) 的脸色～-p ：帮助你直接将所需要的目录递归建立起来！ [root@linux ~]# rmdir [-p] 目录名称参数：-p ：连同上层『空的』目录也一起删除 pwd Print Working Directory ( pwd ,显示当前路径 ) pwd -P 显示出确实的路径,而非使用连接(link)路径cd ( cd /usr/local/ 进入目录 /usr/local/ , cd ../ 返回到上一级目录./ 当前目录 ../父目录 - 代表前一个工作目录 ~代表[目前使用者身份]所在的家目录 ~account代表account这个使用者的家目录)针对 cd 的使用方法，如果仅输入 cd 时，代表的就是『 cd ~ 』 mv ( mv file1 /home/haowen/ ,将文件移动到目录 /home/haowen/下 ,相当于 window 剪切 ) ( mv file1 filenew1 ,将文件名改为 filenew1 ) [root@linux ~]# mv [-fiu] source destination[root@linux ~]# mv [options] source1 source2 source3 …. directory参数：-f ：force 强制的意思，强制直接移动而不询问；-i ：若目标档案 (destination) 已经存在时，就会询问是否覆盖！-u ：若目标档案已经存在，且 source 比较新，才会更新 (update) cp ( cp file1 /home/haowen/ ,将文件复制copy到目录 /home/haowen/下cp -r dir1 /home/haowen/ cp file1 ./file2 复制文件并改名) [root@linux ~]# cp [-adfilprsu] 来源档(source) 目的檔(destination)[root@linux ~]# cp [options] source1 source2 source3 …. directory参数：-a ：相当于 -pdr 的意思；-d ：若来源文件为连结文件的属性(link file)，则复制连结文件属性而非档案本身；-f ：为强制 (force) 的意思，若有重复或其它疑问时，不会询问使用者，而强制复制；-i ：若目的檔(destination)已经存在时，在覆盖时会先询问是否真的动作！-l ：进行硬式连结 (hard link) 的连结档建立，而非复制档案本身；-p ：连同档案的属性一起复制过去，而非使用预设属性；-r ：递归持续复制，用于目录的复制行为；-s ：复制成为符号连结文件 (symbolic link)，亦即『快捷方式』档案；-u ：若 destination 比 source 旧才更新 destination ！ rm ( rm file1 ,rm -r dir1,rm -rf dir2 删除文件或目录, f不提示输入y[root@linux ~]# rm [-fir] 档案或目录参数：-f ：就是 force 的意思，强制移除；-i ：互动模式，在删除前会询问使用者是否动作-r ：递归删除啊！最常用在目录的删除了 touch 建立一个空的档案,将某个档案日期修订为目前 (mtime 与 atime)[root@linux ~]# touch [-acdmt] 档案参数：-a ：仅修订 access time；-c ：仅修改时间，而不建立档案；-d ：后面可以接日期，也可以使用 –date=”日期或时间”-m ：仅修改 mtime ；-t ：后面可以接时间，格式为[YYMMDDhhmm] file 如果你想要知道某个档案的基本数据，例如是属于 ASCII 或者是 data 档案，或者是 binary ， 且其中有没有使用到动态函式库 (share library) 等等的信息，就可以利用 file 这个指令来检阅喔！which (寻找『执行档』) 这个指令是根据『PATH』这个环境变量所规范的路径，去搜寻『执行档』的档名[root@linux ~]# which [-a] command参数：-a ：将所有可以找到的指令均列出，而不止第一个被找到的指令名称 whereis (从数据库寻找特定档案)[root@linux ~]# whereis [-bmsu] 档案或目录名参数：-b :只找 binary 的档案-m :只找在说明文件 manual 路径下的档案-s :只找 source 来源档案-u :没有说明档的档案！ 功能说明：计算字数。语 法：wc [-clw][–help][–version][文件名]补充说明：利用wc指令我们可以计算文件的Byte数、字数、或是列数，若不指定任何文件名称，或是所给予的文件名为”-“，则wc指令会从标准输入设备读取数据。假设不给予其参数，wc指令会一并显示列数、字数和Byte数参 数：-c 只显示Byte数，亦即字符数；-l 只显示列数；-w 只显示字数；-m 同样显示字符数–help 在线帮助；–version 显示此软件的版本信息。 locate 从数据库列出某个档案的完整档名find ./ -name index.jsp 查找当前目录下名称为index.jsp的文件grep ( grep “mobile=13712345678” logfile1 ,在logfile1中搜索查找内容 &quot;mobile=13712345678&quot; ) ping ( ping 61.129.78.9 ,ping www.163.com ,测试网络连接是否正常 )ifconfig ( ifconfig ,查看本机 IP地址，子网掩码等 )ps ( ps aux 查看系统中已经启动的进程, ps aux | grep programe1 ,查看程序1是否正在运行 kill ( kill -9 2325 ,杀死进程号为 2325的进程,killall programe1 ,杀死programe1进程 ) reboot ( 重启系统 )init 0 ( 关机 ,仅 root 用户有权操作 )init 6 ( 重启系统 ,仅 root 用户有权操作 )gzip ( gzip file1 ,压缩文件 file1 )gunzip ( gunzip file1.gz 解压缩文件 file1.gz )tar -zcvf ( tar -zcvf dir1.tar.gz ./dir1 ,将当前目录下 dir1目录所有内容压缩打包,包名dir1.tar.gz ) tar -zxvf ( tar -zxvf dir1.tar.gz ,解开压缩包 )echo “hello!” &gt;&gt; file1 ( 将 “hello” 添加到文件 file1后面,当 file1 不存在就创建 file1 vi file2 ( vi 编即器新建文件 file2)...输入内容 welcome.. ( 按 i 进入 insert 状态 即插入模式 ,按 Esc 退出插入模式 在非插入模式下按 dd 删除光标当前行,按 x 删除当前字, 按 j,n,l移动光标 ) :wq ( 保存退出 ) :q! (不保存退出)增加环境变量[root@linux ~]# echo $PATH[root@linux ~]# PATH=”$PATH”:/root env 显示系统的一些环境变量set 显示系统的所有变量chmod: Linux/Unix 的档案调用权限分为三级 : 档案拥有者、群组、其他。 利用 chmod 可以藉以控制档案如何被他人所调用。 表示增加权限、- 表示取消权限、= 表示唯一设定权限。 r 表示可读取，w 表示可写入，x 表示可执行， 将档案 file1.txt 设为所有人皆可读取 : chmod ugo+r file1.txt 或 chmod 444 file1.txt 将文件 file2 设为属主可读写执行,Group,other ,只能读chmod 744 file2 ( 7=&gt; “111” ,4=&gt;”100” 二进制 ) 将文件 file3 设为属主可读写执行,Group,other ,无权限操作不能读写执行)chmod 700 file3 ( 7=&gt; “111” ,0=&gt;”000” ) 其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。 r=4，w=2，x=1 若要rwx属性则4+2+1=7； 若要rw-属性则4+2=6； 若要r-x属性则4+1=5 tar:tar 调用gzip gzip是GNU组织开发的一个压缩程序，.gz结尾的文件就是gzip压缩的结果。与gzip相对的解压程序是gunzip。tar中使用-z这个参数来调用gzip。 # tar -czf all.tar.gz *.jpg 这条命令是将所有.jpg的文件打成一个tar包，并且将其用gzip压缩，生成一个 gzip压缩过的包，包名为all.tar.gz # tar -xzf all.tar.gz 这条命令是将上面产生的包解开。 date 显示日期的指令：cal 显示日历的指令：bc 简单好用的计算器：[Tab] 按键 (按两次) 命令补全:[Ctrl]-c 按键 中断目前程序:[Ctrl]-d 按键 (相当于输入 exit) 键盘输入结束:info 在线求助 :who 要看目前有谁在在线:finger 显示关于系统用户的信息netstat -a 看网络的联机状态:ntsysv 设置服务随系统启动时同时启动shutdown ,shutdown -h now 惯用的关机指令：reboot, halt, poweroff 重新开机，关机：— 系统相关的命令:—dmesg : 例如 dmesg | more 显示系统的诊断信息,操作系统版本号,物理内及其它信息df : 例如 df -h 显示硬盘空间du : 查看目录中各级子目录使用的硬盘空间free: 查看系统内存,虚拟内存(交换空间)的大小占用情况top: 动态实时查看系统内存,CPU,进程hostname 查看主机名:hostname 新主机名 修改主机名(临时的,重启就没了):man 命令:查看该命令的基础用法info 命令:查看该命令的基础用法ls -l /lib/modules/uname -r/kernel/fs 查看Linux 支持的档案系统有哪些cat /proc/filesystems 查看Linux目前已启用的档案系统type 查询某个指令是来自于外部指令(指的是其它非 bash 套件所提供的指令) 或是内建在 bash 当中的指令[root@linux ~]# type [-tpa] name参数：：不加任何参数时，则 type 会显示出那个 name 是外部指令还是 bash 内建的指令！-t ：当加入 -t 参数时，type 会将 name 以底下这些字眼显示出他的意义：file ：表示为外部指令；alias ：表示该指令为命令别名所设定的名称；builtin ：表示该指令为 bash 内建的指令功能；-p ：如果后面接的 name 为指令时，会显示完整文件名(外部指令)或显示为内建指令；-a ：会将由 PATH 变量定义的路径中，将所有含有 name 的指令都列出来，包含 alias myname=pqb 变量的设定PATH=”$PATH”:/home/dmtsai/bin 变量的累加echo $myname 变量的查看unset myname 变量的取消 在来看看关机，关闭系统使用Shutdown命令，确保用户和系统的资料完整。只有root用户才能使用这个命令。一般的用户是不允许执行这个命令的。我们先看看showdown语法：shutdown [options] when [message]options: -r 表示重启，-h表示系统服务停滞(halt)后，立刻关机，-f表示快速重启when： 为shutdown指定时间。hh:mm：绝对时间，hh指小时，mm指分钟；如08:30，+m:m分钟后执行，now=+0，也就是立刻执行message：表示系统的广播信息，一般提示各个用户系统关机或重启，要求用户保存资料后退出。我们来看看几个例子：shutdown -h now 立刻关机shutdown -h 21:30 今天21：30关机shutdown -h +10 十分钟后关机shutdown -r now 立刻重启shutdown -r +10 ‘the system will reboot’ 10分钟后重启，管理员提示用户系统要重启了，便于用户保存工作中的资料。只有root用户才能使用这个命令。 创建文件创建文件是指创建一个一般的普通文件，并且这个文件为空，我们可以使用touch命令来建立一般文件，如下操作：[root@Linux two]# touch 111.txt 搜索文件我们先来学习一下如何搜索文件，特别是刚开始学习Linux的时候，自己建立的文件不知道放在哪里了，常有发生。如果知道文件名，却不知道文件在那个目录下面了，我们就可以使用locate命令来搜索文件。看如下操作：[root@Linux one]# locate install.log/root/install.log/root/install.log.syslog看一下，我们一下就搜索了两个与install.log相关的文件，他们都在/root目录下，同时我们感觉到，使用这个命令搜索文件的速度比较快，其实要使用这个命令，必须配合数据库来使用，因为这个命令是从数据库中来搜索文件，这个数据库的更新速度是7天更新一次。如下操作：[root@Linux one]# touch 001.txt[root@Linux one]# locate 001.txt发现这个命令找不到新建立的文件，所以我们要使用这个命令搜索文件之前，必须自己更新一下数据库(更新数据库需要root权限)，如下操作：[root@Linux one]# updatedb[root@Linux one]# locate 001.txt/root/one/001.txt看看，如果执行updatedb这个命令更新数据库之后，我们就可以找到我们所需要的数据。不过更新数据库的时间需要一段时间。 locale能看语言环境保存语言信息的文件在/etc/sysconfig/i18n中。 /sbin/service xinetd restart|start|stop 启动后台服务， /sbin/chkconfig –list |more 显示系统服务启动情况，显示了运行级别0到运行级别6的情况.这些服务都是靠系统脚本init启动的。还有一些不是靠系统脚本启动的而下面会看到一些特殊服务，他们不是靠init 启动的。是靠xinetd启动的，是一个独立的互联网服务器的服务器是一个超级服务其，可以启动很多的子服务器。 大家看到 xinetd这个服务只要他是开启的，就可以运行他下面的服务器，它下面的大部分都是关闭的，只有一个是开启的，如果我们想开启一个服务可以使用chkconfig命令，例如我们想开启 rsync服务，我们可以使用chkconfig rsync on|off 命令。 mount在mount命令不使用任何选项和参数的时候将显示当前linux系统中以挂载的文件系统信息。 mount Cttype dev dir光盘文件系统类型是：iso9660；dev表示需要挂载文件系统的设备名称，光盘驱动器的设备名称是/dev/cdrom; dir表示挂载点，即挂载到的文件目录路径。首先介绍光盘的挂载方法：mount -t iso9660 /dev/cdrom /media/cdrom 列出系统中所有存储设备fdisk -l命令 使用“vfat”文件系统类型表示所有的fat文件系统类型，包括fat16和fat32，ntfs还是使用ntfs表示。u盘的挂载方法mount -t vfat /dev/sdb1 /mnt/mount -t ntfs /dev/sdb1 /mnt/ umount命令用于卸载已经挂载的文件系统，基本格式如：umount dir device 对于光盘文件系统的卸载可以使用，以下两条命令中的任意一条umount /dev/cdromumount /media/cdrom u盘的卸载umount /dev/sdb1 eject命令eject 弹出光盘命令eject -t 光盘驱动器自动回收 cut使用权限：所有使用者用法：cut -cnum1-num2 filename说明：显示每行从开头算起 num1 到 num2 的文字。范例：shell&gt;&gt; cat exampletest2this is test1shell&gt;&gt; cut -c0-6 example 开头算起前 6 个字元test2this i 指令名称:ln 使用权限:所有使用者 使用方式:ln [options] source dist,其中 option 的格式为: [-bdfinsvF] [-S backup-suffix] [-V {numbered,existing,simple}] [–help] [–version] [–] 说明:Linux/Unix 档案系统中,有所谓的连结(link),我们可以将其视为档案的别名,而连结又可分为两种:硬连结(hard link)与软连结(symbolic link),硬连结的意思是一个档案可以有多个名称,而软连结的方式则是产生一个特殊的档案,该档案的内容是指向另一个档案的位置。硬连结是存在同一个档案系统中,而软连结却可以跨越不同的档案系统。 ln source dist 是产生一个连结(dist)到 source,至于使用硬连结或软链结则由参数决定。 不论是硬连结或软链结都不会将原本的档案复制一份,只会占用非常少量的磁碟空间。 -f:链结时先将与 dist 同档名的档案删除-d:允许系统管理者硬链结自己的目录-i:在删除与 dist 同档名的档案时先进行询问-n:在进行软连结时,将 dist 视为一般的档案-s:进行软链结(symbolic link)-v:在连结之前显示其档名-b:将在链结时会被覆写或删除的档案进行备份-S SUFFIX:将备份的档案都加上 SUFFIX 的字尾-V METHOD:指定备份的方式–help:显示辅助说明–version:显示版本 范例: 将档案 yy 产生一个 symbolic link:zz ln -s yy zz 将档案 yy 产生一个 hard link:zz ln yy xx 名称:at 使用权限:所有使用者 使用方式:at -V [-q queue] [-f file] [-mldbv] TIME 说明:at 可以让使用者指定在 TIME 这个特定时刻执行某个程式或指令,TIME 的格式是 HH:MM其中的 HH 为小时,MM 为分钟,甚至你也可以指定 am, pm, midnight, noon, teatime(就是下午 4 点锺)等口语词。 如果想要指定超过一天内的时间,则可以用 MMDDYY 或者 MM/DD/YY 的格式,其中 MM 是分钟,DD 是第几日,YY 是指年份。另外,使用者甚至也可以使用像是 now + 时间间隔来弹性指定时间,其中的时间间隔可以是 minutes, hours, days, weeks 另外,使用者也可指定 today 或 tomorrow 来表示今天或明天。当指定了时间并按下 enter 之后,at 会进入交谈模式并要求输入指令或程式,当你输入完后按下 ctrl+D 即可完成所有动作,至于执行的结果将会寄回你的帐号中。 把计: -V:印出版本编号 -q:使用指定的伫列(Queue)来储存,at 的资料是存放在所谓的 queue 中,使用者可以同时使用多个 queue,而 queue 的编号为 a, b, c… z 以及 A, B, … Z 共 52 个 -m:即使程式/指令执行完成后没有输出结果, 也要寄封信给使用者 -f file:读入预先写好的命令档。使用者不一定要使用交谈模式来输入,可以先将所有的指定先写入档案后再一次读入 -l:列出所有的指定 (使用者也可以直接使用 atq 而不用 at -l) -d:删除指定 (使用者也可以直接使用 atrm 而不用 at -d) -v:列出所有已经完成但尚未删除的指定 例子: 三天后的下午 5 点锺执行 /bin/ls: at 5pm + 3 days /bin/ls 三个星期后的下午 5 点锺执行 /bin/ls: at 5pm + 2 weeks /bin/ls 明天的 17:20 执行 /bin/date: at 17:20 tomorrow /bin/date 1999 年的最后一天的最后一分钟印出 the end of world ! at 23:59 12/31/1999 echo the end of world ! 名称：cal 使用权限：所有使用者 使用方式：cal [-mjy] [month [year]] 说明： 显示日历。若只有一个参数,则代表年份(1-9999),显示该年的年历。年份必须全部写出：``cal 89\ 将不会是显示 1989 年的年历。使用两个参数,则表示月份及年份。若没有参数则显示这个月的月历。 1752 年 9 月第 3 日起改用西洋新历,因这时大部份的国家都采用新历,有 10 天被去除,所以该月份的月历有些不同。在此之前为西洋旧历。 匡兜: -m:以星期一为每周的第一天方式显示。 -j:以凯撒历显示,即以一月一日起的天数显示。 -y:显示今年年历。 范例： cal:显示本月的月历。 [root@mylinux /root]# date Tue Aug 15 08:00:18 CST 2000 [root@mylinux /root]# cal … cal 2001:显示公元 2001 年年历。 [root@mylinux /root]# cal 2001 … cal 5 2001:显示公元 2001 年 5 月月历。 [root@mylinux /root]# cal 5 2001 名称:crontab 使用权限:所有使用者 使用方式: crontab [ -u user ] filecrontab [ -u user ] { -l | -r | -e } 说明: crontab 是用来让使用者在固定时间或固定间隔执行程式之用,换句话说,也就是类似使用者的时程表。-u user 是指设定指定 user 的时程表,这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话,就是表示设定自己的时程表。 参数: -e:执行文字编辑器来设定时程表,内定的文字编辑器是 VI,如果你想用别的文字编辑器,则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe) -r:删除目前的时程表 -l:列出目前的时程表 时程表的格式如下: f1 f2 f3 f4 f5 program 其中 f1 是表示分钟,f2 表示小时,f3 表示一个月份中的第几日,f4 表示月份,f5 表示一个星期中的第几天。program 表示要执行的程式。 当 f1 为 时表示每分钟都要执行 program,f2 为 时表示每小时都要执行程式,其余类推 当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行,f2 为 a-b 时表示从第 a 到第 b 小时都要执行,其余类推 当 f1 为 /n 时表示每 n 分钟个时间间隔执行一次,f2 为 /n 表示每 n 小时个时间间隔执行一次,其余类推 当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行,f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行,其余类推 使用者也可以将所有的设定先存放在档案 file 中,用 crontab file 的方式来设定时程表。 例子: 每月每天每小时的第 0 分钟执行一次 /bin/ls: 0 7 * /bin/ls 在 12 月内, 每天的早上 6 点到 12 点中,每隔 20 分钟执行一次 /usr/bin/backup: 0 6-12/3 12 /usr/bin/backup 周一到周五每天下午 5:00 寄一封信给 alex@domain.name: 0 17 1-5 mail -s “hi” alex@domain.name &lt; /tmp/maildata 每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha” 20 0-23/2 * echo “haha” 注意: 当程式在你所指定的时间执行后,系统会寄一封信给你,显示该程式执行的内容,若是你不希望收到这样的信,请在每一行空一格之后加上 &gt; /dev/null 2&gt;&amp;1 即可。 名称:sleep 使用权限:所有使用者 使用方式:sleep [–help] [–version] number[smhd] 说明:sleep 可以用来将目前动作延迟一段时间 参数说明: –help:显示辅助讯息 –version:显示版本编号 number:时间长度,后面可接 s,m,h 或 d 其中 s 为秒,m 为 分钟,h 为小时,d 为日数 例子: 显示目前时间后延迟 1 分钟,之后再次显示时间: date;sleep 1m;date 名称： finger 使用权限： 所有使用者 使用方式： finger [options] user[@address] 说明：finger 可以让使用者查询一些其他使用者的资料。 范例：下列指令可以查询本机管理员的资料： finger root 名称：last 使用权限：所有使用者 使用方式：shell&gt;&gt; last [options] 说明：显示系统开机以来获是从每月初登入者的讯息 把计: -R 省略 hostname 的栏位 -num 展示前 num 个 username 展示 username 的登入讯息 tty 限制登入讯息包含终端机代号 范例： shell&gt;&gt; last -R -2 名称:write 使用权限:所有使用者 使用方式: write user [ttyname] 说明:传讯息给其他使用者 把计: user:预备传讯息的使用者帐号 ttyname:如果使用者同时有两个以上的 tty 连线,可以自行选择合适的 tty 传讯息 例子.1: 传讯息给 Rollaend,此时 Rollaend 只有一个连线: write Rollaend 接下来就是将讯息打上去,结束请按 ctrl+c 例子.2 :传讯息给 Rollaend,Rollaend 的连线有 pts/2,pts/3: write Rollaend pts/2 接下来就是将讯息打上去,结束请按 ctrl+c 注意:若对方设定 mesg n,则此时讯席将无法传给对方 名称：expr 使用权限：所有使用者 ### 字串长度 shell&gt;&gt; expr length “this is a test” 14 ### 数字商数 shell&gt;&gt; expr 14 % 9 5 ### 从位置处抓取字串 shell&gt;&gt; expr substr “this is a test” 3 5 is is ### 数字串 only the first character shell&gt;&gt; expr index “testforthegame” e 2 ### 字串真实重现 shell&gt;&gt; expr quote thisisatestformela thisisatestformela 指令：clear 用途：清除萤幕用。 使用方法：在 console 上输入 clear。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[定时任务实现方式探究]]></title>
      <url>%2F2017%2F04%2F19%2Ftimer-and-scheduled%2F</url>
      <content type="text"><![CDATA[综述在java中实现定时任务主要有两种方式 * Timer和TimerTask * ScheduledExecutorService Timer和TimerTask实现每天定时执行任务方式对比####基本用法1、这个方法是调度一个task，经过delay(ms)后开始进行调度，仅仅调度一次。1public void schedule(TimerTask task, long delay) 2、在指定的时间点time上调度一次。1public void schedule(TimerTask task, Date time) 3、这个方法是调度一个task，在delay（ms）后开始调度，每次调度完后，最少等待period（ms）后才开始调度。1public void schedule(TimerTask task, long delay, long period) 4、和上一个方法类似，唯一的区别就是传入的第二个参数为第一次调度的时间。1public void schedule(TimerTask task, Date firstTime, long period) ####代码示例12345678910111213141516171819import java.util.Calendar;public class CalendarUtil &#123; private static final Calendar cale=Calendar.getInstance(); /** * 根据输入的年月日时分获取long值 * @param year * @param month * @param date * @param hourOfDay * @param minute * @return */ public static long getMillions(int year,int month,int date,int hourOfDay,int minute)&#123; cale.set(year, month, date, hourOfDay, minute); return cale.getTimeInMillis(); &#125;&#125; 123456789101112131415161718import java.util.Date;import java.util.TimerTask;public class TestTimerTask extends TimerTask &#123; @Override public void run() &#123; try&#123; System.out.println(Thread.currentThread()+"timerTask run at"+new Date(System.currentTimeMillis())); Thread.sleep(1000); &#125;catch(Exception e )&#123; e.printStackTrace(); &#125; &#125;&#125; 123456789101112131415161718import java.util.Date;import java.util.Timer;public class TimerDemo &#123; public static final Timer tim=new Timer(); public static void main(String[] args) &#123; //执行日期 Date time=new Date(); long period=24*60*60*1000;//每天执行一次 //创建timertask任务 TestTimerTask task =new TestTimerTask(); //计划任务开启// tim.schedule(task, time); //每天的这个时候执行一次 tim.schedule(task, time, period); &#125;&#125; ####注意事项 ScheduledExecutorService####基本用法详细使用方法参见《线程池初探》 ####代码示例1234567891011121314151617181920212223242526272829303132import java.util.Date;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;import com.zzc.util.CalendarUtil;public class TestSecheduledThreadPool &#123; // 创建任务执行器 private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1); public void execHour(long beginTimeDelay) &#123; // 声明要定时执行的任务 final Runnable exec = new Runnable() &#123; public void run() &#123; System.out.println(Thread.currentThread().getName() + "线程开始执行" + new Date(System.currentTimeMillis())); &#125; &#125;; // 开启周期执行任务的计划 scheduler.scheduleAtFixedRate(exec, 10, 1000 * 60 * 60 * 24, TimeUnit.MILLISECONDS); &#125; public static void main(String[] args) &#123; TestSecheduledThreadPool demo = new TestSecheduledThreadPool(); //设置第一次执行任务的日期 long beginTime=CalendarUtil.getMillions(2017, 4, 24, 2, 0); //获取到达指定时间运行需要延迟的时间 long beginTimeDelay=Math.abs(beginTime-System.currentTimeMillis()); demo.execHour(beginTimeDelay); &#125;&#125; ####注意事项]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[java线程池初探]]></title>
      <url>%2F2017%2F04%2F09%2Fjava-thread-pool%2F</url>
      <content type="text"><![CDATA[newFixedThreadPool简述将创建一个固定长度的线程池，每当提交一个任务就创建一个线程。直到达到线程池的最大数量。这时线程池的规模不在变化（如果有个线程由于发生了未逾期的Exception而结束，那么线程池会补充一个新的线程） 代码demo123456789101112131415161718192021import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class NewFixedThreadPoolDemo &#123; //创建一个长度为2的线程池 private final ExecutorService service=Executors.newFixedThreadPool(2); public void exectorExec()&#123; for(int i = 0;i&lt;10;i++)&#123; TestRunnable text=new TestRunnable(); service.execute(text); &#125; service.shutdown(); &#125; public static void main(String[] args) &#123; NewFixedThreadPoolDemo demo=new NewFixedThreadPoolDemo(); demo.exectorExec(); &#125; &#125; 执行结果1234567891011121314151617181920pool-1-thread-2线程开始执行Tue Apr 11 23:55:59 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:55:59 CST 2017pool-1-thread-2线程执行结束Tue Apr 11 23:56:00 CST 2017pool-1-thread-2线程开始执行Tue Apr 11 23:56:00 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:56:00 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:56:00 CST 2017pool-1-thread-2线程执行结束Tue Apr 11 23:56:01 CST 2017pool-1-thread-2线程开始执行Tue Apr 11 23:56:01 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:56:01 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:56:01 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:56:02 CST 2017pool-1-thread-2线程执行结束Tue Apr 11 23:56:02 CST 2017pool-1-thread-2线程开始执行Tue Apr 11 23:56:02 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:56:02 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:56:03 CST 2017pool-1-thread-2线程执行结束Tue Apr 11 23:56:03 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:56:03 CST 2017pool-1-thread-2线程开始执行Tue Apr 11 23:56:03 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:56:04 CST 2017pool-1-thread-2线程执行结束Tue Apr 11 23:56:04 CST 2017 newCachedThreadPool简述将创建一个可缓存的线程池如果当前线程池超过了处理需求时，那么将回收空闲的线程，而当需求增加时，可以添加新的线程，线程池的规模不受限制 代码demo1234567891011121314151617181920import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class NewCachedThreadPoolDemo &#123; private final ExecutorService service=Executors.newCachedThreadPool(); public void exectorExec()&#123; for(int i=0;i&lt;10;i++)&#123; TestRunnable text=new TestRunnable(); text.setI(i); service.execute(text); &#125; service.shutdown(); &#125; public static void main(String[] args) &#123; NewCachedThreadPoolDemo demo=new NewCachedThreadPoolDemo(); demo.exectorExec(); &#125;&#125; 执行结果1234567891011121314151617181920pool-1-thread-10线程开始执行Tue Apr 11 23:54:35 CST 2017pool-1-thread-8线程开始执行Tue Apr 11 23:54:35 CST 2017pool-1-thread-4线程开始执行Tue Apr 11 23:54:35 CST 2017pool-1-thread-6线程开始执行Tue Apr 11 23:54:35 CST 2017pool-1-thread-5线程开始执行Tue Apr 11 23:54:35 CST 2017pool-1-thread-3线程开始执行Tue Apr 11 23:54:35 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:54:35 CST 2017pool-1-thread-7线程开始执行Tue Apr 11 23:54:35 CST 2017pool-1-thread-9线程开始执行Tue Apr 11 23:54:35 CST 2017pool-1-thread-2线程开始执行Tue Apr 11 23:54:35 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:54:35 CST 2017pool-1-thread-2线程执行结束Tue Apr 11 23:54:36 CST 2017pool-1-thread-3线程执行结束Tue Apr 11 23:54:37 CST 2017pool-1-thread-4线程执行结束Tue Apr 11 23:54:38 CST 2017pool-1-thread-5线程执行结束Tue Apr 11 23:54:39 CST 2017pool-1-thread-6线程执行结束Tue Apr 11 23:54:40 CST 2017pool-1-thread-7线程执行结束Tue Apr 11 23:54:41 CST 2017pool-1-thread-8线程执行结束Tue Apr 11 23:54:42 CST 2017pool-1-thread-9线程执行结束Tue Apr 11 23:54:43 CST 2017pool-1-thread-10线程执行结束Tue Apr 11 23:54:44 CST 2017 newSingleThreadPool简述单线程的Executor，它创建单个工作者线程来执行任务，如果这个线程异常结束，会创建另一个线程来替代它。newSingleThreadExecutor能确保依照任务在队列的顺序来串行执行（例如FIFO/LIFO/优先级） 代码demo12345678910111213141516171819import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class NewSingleThreadPoolDemo &#123; private final ExecutorService service=Executors.newSingleThreadExecutor(); public void exectorExec()&#123; for(int i=0;i&lt;10;i++)&#123; TestRunnable text=new TestRunnable(); text.setI(i); service.execute(text); &#125; service.shutdown(); &#125; public static void main(String[] args) &#123; NewSingleThreadPoolDemo demo=new NewSingleThreadPoolDemo(); demo.exectorExec(); &#125;&#125; 执行结果12345678910111213141516171819pool-1-thread-1线程开始执行Tue Apr 11 23:57:18 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:57:18 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:57:18 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:57:19 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:57:19 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:57:21 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:57:21 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:57:24 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:57:24 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:57:28 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:57:28 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:57:33 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:57:33 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:57:39 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:57:39 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:57:46 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:57:46 CST 2017pool-1-thread-1线程执行结束Tue Apr 11 23:57:54 CST 2017pool-1-thread-1线程开始执行Tue Apr 11 23:57:54 CST 2017 newSecheduledThreadPool简述创建一个固定长度的线程池，而且以延迟或定时的方式来执行任务，类似于Timer 代码demo12345678910111213141516171819202122232425262728293031323334import java.util.Date;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.ScheduledFuture;import java.util.concurrent.TimeUnit;public class NewSecheduledThreadPoolDemo &#123; //创建任务执行器 private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1); public void execHour() &#123; //声明要定时执行的任务 final Runnable exec = new Runnable() &#123; public void run() &#123; System.out.println(Thread.currentThread().getName()+"线程开始执行" + new Date(System.currentTimeMillis())); &#125; &#125;; //开启周期执行任务的计划 final ScheduledFuture&lt;?&gt; execHandle = scheduler.scheduleAtFixedRate(exec, 10, 10, TimeUnit.SECONDS); //开启一个线程用于一小时后取消这个任务 scheduler.schedule(new Runnable() &#123; @Override public void run() &#123; execHandle.cancel(true); &#125; &#125;, 60 * 60, TimeUnit.SECONDS); &#125; public static void main(String[] args) &#123; NewSecheduledThreadPoolDemo demo = new NewSecheduledThreadPoolDemo(); demo.execHour(); &#125;&#125; 执行结果1234567pool-1-thread-1线程开始执行Wed Apr 12 00:01:32 CST 2017pool-1-thread-1线程开始执行Wed Apr 12 00:01:42 CST 2017pool-1-thread-1线程开始执行Wed Apr 12 00:01:52 CST 2017pool-1-thread-1线程开始执行Wed Apr 12 00:02:02 CST 2017pool-1-thread-1线程开始执行Wed Apr 12 00:02:12 CST 2017pool-1-thread-1线程开始执行Wed Apr 12 00:02:22 CST 2017pool-1-thread-1线程开始执行Wed Apr 12 00:02:32 CST 2017]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo常见问题]]></title>
      <url>%2F2017%2F04%2F03%2FHexoProblem%2F</url>
      <content type="text"><![CDATA[一、写文章出现横向滚动条的问题 写文章时，每行写的文字比较长，出现了横线滚动条 目前的解决办法，在文章开头添加’&lt;\blockquote class=”blockquote-center”&gt;’标签。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[杭州人才引进户口迁移的详细过程]]></title>
      <url>%2F2017%2F04%2F03%2FStartHangzhou%2F</url>
      <content type="text"><![CDATA[来杭州快三年了，年初回家仔细思考了一下，觉得未来还是留在杭州比较好，决定把户口迁移到杭州。迁移的是杭州的高新区的集体户口，走的是人才引进，下面介绍一下详细的流程。 一、档案迁入 杭州市人才市场的集体户办理必须要求档案在它那里才能办理集体户 1、单位开具调档申请 2、持身份证、《调档申请》以及劳动合同到人才市场，拿到《调档函》（去办理时是在中午，只看了调档申请，就把《调档函》给我了） 3、将身份证复印件以及调档函邮寄到档案所在地（淘宝找人帮我代办的，办一次240，至少比请假回南昌要好很多） 4、代办人拿着材料去以前的档案所在地，拿到档案，注意一定要确认报道证是不是在档案里面，要不还要进行报到证补办手续 5、档案可以走机要通道，我嫌慢要求代办人帮我直接寄过来了（寄过来的档案各位千万别打开，要不然死档了） 6、拿着身份证、档案到人才市场办理档案托管手续。 二、户口 档案在网上能够查到之后 1、去杭州滨江区派出所户籍科拿到《进杭落户申请表》。（吐槽一下，户籍科和派出所居然不在一起的，太恶心了) 2、填写进杭落户申请表的相关信息，然后把申请表拿给公司人事盖章（盖章之后一定要人事签字，要签字，要签字重要的事情说三遍） 3、拿着盖了公司章的审批表、身份证及复印件，劳动合同及复印件、社保证明、《无房证明》（注意不是不动产那个，而且开两张户籍科那边审批还要用）到人才市场办理《同意落户证明》 4、持一大堆材料到杭州市公安局户籍科办理落户手续，户籍中心留下复印件，拿到回执单 5、看到杭州公安微信号上面你的审批通过以后拿着身份证和回执单到户籍科拿到进杭落户审批表红联和《准予迁入证明》 6、将身份证和户口本和准予迁入证明邮寄到户口所在地 7、将身份证、《准予迁入证明》第三联合户口迁移证邮寄回来 8、持身份证、进杭落户审批表红联、准予迁入证明第三联和《户口迁移证》到人才市场拿到同意落户证明和进杭落户告知书 9、持身份证、进杭落户审批表红联、准予迁入证明第三联、户口迁移证和同意落户证明到人才市场集体户所在派出所办理户口迁入，有需要可以同时办理新身份证 三、注意点： 1、无房证明直接开两张，人才市场和户籍科都要 2、无房证明不是不动产证明，注意不要打印错了 3、给户籍科一大堆材料主要包括：身份证及复印件，户口本以及（首页及本人页的复印件）、毕业证及复印件、学位证及复印件、劳动合同及复印件、社保证明、无房证明、进杭落户审批表 附图：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hello]]></title>
      <url>%2F2017%2F03%2F18%2Fhello%2F</url>
      <content type="text"><![CDATA[你好，这是我的第一篇文章]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F18%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
